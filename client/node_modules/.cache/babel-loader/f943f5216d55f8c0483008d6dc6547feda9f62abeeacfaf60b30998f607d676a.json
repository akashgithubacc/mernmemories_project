{"ast":null,"code":"import * as api from \"../api\";\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_POST } from \"../constants/actionTypes\";\n//Action Creators\n\n// here, to fetch all the data from the api, it is going to be an\n// asynchronized functions, so we have to use thunk here to use async\n// thunk allows us to do async(dispatch)\n// and as we have used redux thunk, so instead of returning action in\n// fetchPosts we need to do dispatch(action) instead of return action\n\nexport const getPosts = page => async dispatch => {\n  try {\n    // to catch all the data from the backend api\n\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    console.log(data);\n\n    // so as dispatch takes action as an input and\n    // action has a type and a payload,  so\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    // to catch all the data from the backend api\n\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    console.log(data);\n\n    // so as dispatch takes action as an input and\n    // action has a type and a payload,  so\n\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostBySearch = searchQuery => async dispatch => {\n  console.log(searchQuery);\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n\n    //console.log(data);\n\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, navigate) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    navigate(`/posts/${data._id}`);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post, navigate) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.updatePost(id, post);\n    navigate(`/posts/${data._id}`);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","FETCH_POST","getPosts","page","dispatch","type","data","fetchPosts","console","log","payload","error","getPost","id","fetchPost","getPostBySearch","searchQuery","fetchPostsBySearch","createPost","post","navigate","_id","updatePost","deletePost","likePost"],"sources":["C:/Users/deepa/OneDrive/Desktop/Complete Web Development/memories_project/client/src/actions/posts.js"],"sourcesContent":["import * as api from \"../api\";\r\nimport {\r\n  FETCH_ALL,\r\n  CREATE,\r\n  UPDATE,\r\n  DELETE,\r\n  LIKE,\r\n  FETCH_BY_SEARCH,\r\n  START_LOADING,\r\n  END_LOADING,\r\n  FETCH_POST,\r\n} from \"../constants/actionTypes\";\r\n//Action Creators\r\n\r\n// here, to fetch all the data from the api, it is going to be an\r\n// asynchronized functions, so we have to use thunk here to use async\r\n// thunk allows us to do async(dispatch)\r\n// and as we have used redux thunk, so instead of returning action in\r\n// fetchPosts we need to do dispatch(action) instead of return action\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  try {\r\n    // to catch all the data from the backend api\r\n\r\n    dispatch({ type: START_LOADING });\r\n\r\n    const { data } = await api.fetchPosts(page);\r\n    console.log(data);\r\n\r\n    // so as dispatch takes action as an input and\r\n    // action has a type and a payload,  so\r\n\r\n    dispatch({ type: FETCH_ALL, payload: data });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n  try {\r\n    // to catch all the data from the backend api\r\n\r\n    dispatch({ type: START_LOADING });\r\n\r\n    const { data } = await api.fetchPost(id);\r\n    console.log(data);\r\n\r\n    // so as dispatch takes action as an input and\r\n    // action has a type and a payload,  so\r\n\r\n    dispatch({ type: FETCH_POST, payload: data });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getPostBySearch = (searchQuery) => async (dispatch) => {\r\n  console.log(searchQuery);\r\n\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n\r\n    const {\r\n      data: { data },\r\n    } = await api.fetchPostsBySearch(searchQuery);\r\n\r\n    //console.log(data);\r\n\r\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const createPost = (post, navigate) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data } = await api.createPost(post);\r\n\r\n    navigate(`/posts/${data._id}`);\r\n\r\n    dispatch({ type: CREATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updatePost = (id, post, navigate) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data } = await api.updatePost(id, post);\r\n    navigate(`/posts/${data._id}`);\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await api.deletePost(id);\r\n\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.likePost(id);\r\n\r\n    dispatch({ type: LIKE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}