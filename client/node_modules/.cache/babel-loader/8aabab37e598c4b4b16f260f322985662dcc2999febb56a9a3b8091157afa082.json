{"ast":null,"code":"import * as api from \"../api\";\n\n//Action Creators\n\n// here, to fetch all the data from the api, it is going to be an\n// asynchronized functions, so we have to use thunk here to use async\n// thunk allows us to do async(dispatch)\n// and as we have used redux thunk, so instead of returning action in\n// fetchPosts we need to do dispatch(action) instead of return action\n\nexport const getPosts = () => async dispatch => {\n  try {\n    // to catch all the data from the backend api\n\n    const {\n      data\n    } = await api.fetchPosts();\n\n    // so as dispatch takes action as an input and\n    // action has a type and a payload,  so\n\n    dispatch({\n      type: \"FETCH_ALL\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: \"CREATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: \"UPDATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: \"DELETE\",\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: \"UPDATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","createPost","post","updatePost","id","deletePost","likePost"],"sources":["C:/Users/deepa/OneDrive/Desktop/Complete Web Development/memories_project/client/src/actions/posts.js"],"sourcesContent":["import * as api from \"../api\";\r\n\r\n//Action Creators\r\n\r\n// here, to fetch all the data from the api, it is going to be an\r\n// asynchronized functions, so we have to use thunk here to use async\r\n// thunk allows us to do async(dispatch)\r\n// and as we have used redux thunk, so instead of returning action in\r\n// fetchPosts we need to do dispatch(action) instead of return action\r\n\r\nexport const getPosts = () => async (dispatch) => {\r\n  try {\r\n    // to catch all the data from the backend api\r\n\r\n    const { data } = await api.fetchPosts();\r\n\r\n    // so as dispatch takes action as an input and\r\n    // action has a type and a payload,  so\r\n\r\n    dispatch({ type: \"FETCH_ALL\", payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.createPost(post);\r\n\r\n    dispatch({ type: \"CREATE\", payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n\r\n    dispatch({ type: \"UPDATE\", payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await api.deletePost(id);\r\n\r\n    dispatch({ type: \"DELETE\", payload: id });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.likePost(id);\r\n\r\n    dispatch({ type: \"UPDATE\", payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,QAAQ;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACF;;IAEA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMH,GAAG,CAACI,UAAU,CAAC,CAAC;;IAEvC;IACA;;IAEAF,QAAQ,CAAC;MAAEG,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMG,UAAU,GAAIC,IAAI,IAAK,MAAOT,QAAQ,IAAK;EACtD,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMH,GAAG,CAACU,UAAU,CAACC,IAAI,CAAC;IAE3CT,QAAQ,CAAC;MAAEG,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMK,UAAU,GAAGA,CAACC,EAAE,EAAEF,IAAI,KAAK,MAAOT,QAAQ,IAAK;EAC1D,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMH,GAAG,CAACY,UAAU,CAACC,EAAE,EAAEF,IAAI,CAAC;IAE/CT,QAAQ,CAAC;MAAEG,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMO,UAAU,GAAID,EAAE,IAAK,MAAOX,QAAQ,IAAK;EACpD,IAAI;IACF,MAAMF,GAAG,CAACc,UAAU,CAACD,EAAE,CAAC;IAExBX,QAAQ,CAAC;MAAEG,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAEO;IAAG,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAIF,EAAE,IAAK,MAAOX,QAAQ,IAAK;EAClD,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMH,GAAG,CAACe,QAAQ,CAACF,EAAE,CAAC;IAEvCX,QAAQ,CAAC;MAAEG,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}